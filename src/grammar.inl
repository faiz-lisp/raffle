/* A recursive-descent parser generated by peg 0.1.15 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 22
#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_EndOfLine(yycontext *yy); /* 22 */
YY_RULE(int) yy_Comment(yycontext *yy); /* 21 */
YY_RULE(int) yy_Space(yycontext *yy); /* 20 */
YY_RULE(int) yy_Braces(yycontext *yy); /* 19 */
YY_RULE(int) yy_Brackets(yycontext *yy); /* 18 */
YY_RULE(int) yy_Number(yycontext *yy); /* 17 */
YY_RULE(int) yy_Parens(yycontext *yy); /* 16 */
YY_RULE(int) yy_Subscript(yycontext *yy); /* 15 */
YY_RULE(int) yy_Term(yycontext *yy); /* 14 */
YY_RULE(int) yy_Primary(yycontext *yy); /* 13 */
YY_RULE(int) yy_Factor(yycontext *yy); /* 12 */
YY_RULE(int) yy_Arithmetic(yycontext *yy); /* 11 */
YY_RULE(int) yy_Comparison(yycontext *yy); /* 10 */
YY_RULE(int) yy_Identifier(yycontext *yy); /* 9 */
YY_RULE(int) yy_List(yycontext *yy); /* 8 */
YY_RULE(int) yy_Function(yycontext *yy); /* 7 */
YY_RULE(int) yy_Definition(yycontext *yy); /* 6 */
YY_RULE(int) yy_Expression(yycontext *yy); /* 5 */
YY_RULE(int) yy_EndOfFile(yycontext *yy); /* 4 */
YY_RULE(int) yy_Procedure(yycontext *yy); /* 3 */
YY_RULE(int) yy__(yycontext *yy); /* 2 */
YY_RULE(int) yy_Input(yycontext *yy); /* 1 */

YY_ACTION(void) yy_1_Identifier(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Identifier\n"));
  {
   /*identifier*/ ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Number(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Number\n"));
  {
   /*number*/ ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}

YY_RULE(int) yy_EndOfLine(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EndOfLine"));
  {  int yypos2= yy->__pos, yythunkpos2= yy->__thunkpos;  if (!yymatchString(yy, "\r\n")) goto l3;  goto l2;
  l3:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchChar(yy, '\n')) goto l4;  goto l2;
  l4:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchChar(yy, '\r')) goto l1;
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfLine", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfLine", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Comment(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yymatchChar(yy, '#')) goto l5;
  l6:;	
  {  int yypos7= yy->__pos, yythunkpos7= yy->__thunkpos;
  {  int yypos8= yy->__pos, yythunkpos8= yy->__thunkpos;  if (!yy_EndOfLine(yy)) goto l8;  goto l7;
  l8:;	  yy->__pos= yypos8; yy->__thunkpos= yythunkpos8;
  }  if (!yymatchDot(yy)) goto l7;  goto l6;
  l7:;	  yy->__pos= yypos7; yy->__thunkpos= yythunkpos7;
  }  if (!yy_EndOfLine(yy)) goto l5;
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 1;
  l5:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Space(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Space"));
  {  int yypos10= yy->__pos, yythunkpos10= yy->__thunkpos;  if (!yymatchChar(yy, ' ')) goto l11;  goto l10;
  l11:;	  yy->__pos= yypos10; yy->__thunkpos= yythunkpos10;  if (!yymatchChar(yy, '\t')) goto l12;  goto l10;
  l12:;	  yy->__pos= yypos10; yy->__thunkpos= yythunkpos10;  if (!yy_EndOfLine(yy)) goto l9;
  }
  l10:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Space", yy->__buf+yy->__pos));
  return 1;
  l9:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Space", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Braces(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Braces"));  if (!yymatchChar(yy, '{')) goto l13;  if (!yy__(yy)) goto l13;
  {  int yypos14= yy->__pos, yythunkpos14= yy->__thunkpos;  if (!yy_Procedure(yy)) goto l14;  goto l15;
  l14:;	  yy->__pos= yypos14; yy->__thunkpos= yythunkpos14;
  }
  l15:;	  if (!yymatchChar(yy, '}')) goto l13;  if (!yy__(yy)) goto l13;
  yyprintf((stderr, "  ok   %s @ %s\n", "Braces", yy->__buf+yy->__pos));
  return 1;
  l13:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Braces", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Brackets(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Brackets"));  if (!yymatchChar(yy, '[')) goto l16;  if (!yy__(yy)) goto l16;
  {  int yypos17= yy->__pos, yythunkpos17= yy->__thunkpos;  if (!yy_Expression(yy)) goto l17;  goto l18;
  l17:;	  yy->__pos= yypos17; yy->__thunkpos= yythunkpos17;
  }
  l18:;	  if (!yymatchChar(yy, ']')) goto l16;  if (!yy__(yy)) goto l16;
  yyprintf((stderr, "  ok   %s @ %s\n", "Brackets", yy->__buf+yy->__pos));
  return 1;
  l16:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Brackets", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Number(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Number"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l19;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;
  l20:;	
  {  int yypos21= yy->__pos, yythunkpos21= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l21;  goto l20;
  l21:;	  yy->__pos= yypos21; yy->__thunkpos= yythunkpos21;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l19;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_Number, yy->__begin, yy->__end);  if (!yy__(yy)) goto l19;
  yyprintf((stderr, "  ok   %s @ %s\n", "Number", yy->__buf+yy->__pos));
  return 1;
  l19:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Number", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Parens(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Parens"));  if (!yymatchChar(yy, '(')) goto l22;  if (!yy__(yy)) goto l22;
  {  int yypos23= yy->__pos, yythunkpos23= yy->__thunkpos;  if (!yy_Expression(yy)) goto l23;  goto l24;
  l23:;	  yy->__pos= yypos23; yy->__thunkpos= yythunkpos23;
  }
  l24:;	  if (!yymatchChar(yy, ')')) goto l22;  if (!yy__(yy)) goto l22;
  yyprintf((stderr, "  ok   %s @ %s\n", "Parens", yy->__buf+yy->__pos));
  return 1;
  l22:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Parens", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Subscript(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Subscript"));
  {  int yypos26= yy->__pos, yythunkpos26= yy->__thunkpos;  if (!yy_Parens(yy)) goto l27;  goto l26;
  l27:;	  yy->__pos= yypos26; yy->__thunkpos= yythunkpos26;  if (!yy_Brackets(yy)) goto l28;  goto l26;
  l28:;	  yy->__pos= yypos26; yy->__thunkpos= yythunkpos26;  if (!yy_Braces(yy)) goto l25;
  }
  l26:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Subscript", yy->__buf+yy->__pos));
  return 1;
  l25:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Subscript", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Term(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Term"));
  {  int yypos30= yy->__pos, yythunkpos30= yy->__thunkpos;  if (!yy_Parens(yy)) goto l31;  goto l30;
  l31:;	  yy->__pos= yypos30; yy->__thunkpos= yythunkpos30;  if (!yy_Number(yy)) goto l32;  goto l30;
  l32:;	  yy->__pos= yypos30; yy->__thunkpos= yythunkpos30;  if (!yy_Identifier(yy)) goto l29;
  }
  l30:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Term", yy->__buf+yy->__pos));
  return 1;
  l29:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Term", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Primary(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Primary"));
  {  int yypos34= yy->__pos, yythunkpos34= yy->__thunkpos;
  {  int yypos36= yy->__pos, yythunkpos36= yy->__thunkpos;  if (!yymatchChar(yy, '!')) goto l37;  if (!yy__(yy)) goto l37;  goto l36;
  l37:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;  if (!yymatchChar(yy, '-')) goto l34;  if (!yy__(yy)) goto l34;
  }
  l36:;	  goto l35;
  l34:;	  yy->__pos= yypos34; yy->__thunkpos= yythunkpos34;
  }
  l35:;	  if (!yy_Term(yy)) goto l33;
  l38:;	
  {  int yypos39= yy->__pos, yythunkpos39= yy->__thunkpos;
  {  int yypos40= yy->__pos, yythunkpos40= yy->__thunkpos;  if (!yy_Subscript(yy)) goto l41;  goto l40;
  l41:;	  yy->__pos= yypos40; yy->__thunkpos= yythunkpos40;  if (!yymatchChar(yy, '.')) goto l39;  if (!yy__(yy)) goto l39;  if (!yy_Identifier(yy)) goto l39;
  }
  l40:;	  goto l38;
  l39:;	  yy->__pos= yypos39; yy->__thunkpos= yythunkpos39;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Primary", yy->__buf+yy->__pos));
  return 1;
  l33:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Primary", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Factor(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Factor"));  if (!yy_Primary(yy)) goto l42;
  l43:;	
  {  int yypos44= yy->__pos, yythunkpos44= yy->__thunkpos;
  {  int yypos45= yy->__pos, yythunkpos45= yy->__thunkpos;  if (!yymatchChar(yy, '*')) goto l46;  goto l45;
  l46:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;  if (!yymatchChar(yy, '/')) goto l47;  goto l45;
  l47:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;  if (!yymatchChar(yy, '%')) goto l48;  goto l45;
  l48:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;  if (!yymatchString(yy, "<<")) goto l49;  goto l45;
  l49:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;  if (!yymatchString(yy, ">>")) goto l44;
  }
  l45:;	  if (!yy__(yy)) goto l44;  if (!yy_Factor(yy)) goto l44;  goto l43;
  l44:;	  yy->__pos= yypos44; yy->__thunkpos= yythunkpos44;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Factor", yy->__buf+yy->__pos));
  return 1;
  l42:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Factor", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Arithmetic(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Arithmetic"));  if (!yy_Factor(yy)) goto l50;
  l51:;	
  {  int yypos52= yy->__pos, yythunkpos52= yy->__thunkpos;
  {  int yypos53= yy->__pos, yythunkpos53= yy->__thunkpos;  if (!yymatchChar(yy, '+')) goto l54;  goto l53;
  l54:;	  yy->__pos= yypos53; yy->__thunkpos= yythunkpos53;  if (!yymatchChar(yy, '-')) goto l52;
  }
  l53:;	  if (!yy__(yy)) goto l52;  if (!yy_Arithmetic(yy)) goto l52;  goto l51;
  l52:;	  yy->__pos= yypos52; yy->__thunkpos= yythunkpos52;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Arithmetic", yy->__buf+yy->__pos));
  return 1;
  l50:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Arithmetic", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Comparison(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Comparison"));  if (!yy_Arithmetic(yy)) goto l55;
  l56:;	
  {  int yypos57= yy->__pos, yythunkpos57= yy->__thunkpos;
  {  int yypos58= yy->__pos, yythunkpos58= yy->__thunkpos;  if (!yymatchChar(yy, '!')) goto l58;  goto l59;
  l58:;	  yy->__pos= yypos58; yy->__thunkpos= yythunkpos58;
  }
  l59:;	
  {  int yypos60= yy->__pos, yythunkpos60= yy->__thunkpos;  if (!yymatchChar(yy, '=')) goto l61;  goto l60;
  l61:;	  yy->__pos= yypos60; yy->__thunkpos= yythunkpos60;  if (!yymatchChar(yy, '>')) goto l62;  goto l60;
  l62:;	  yy->__pos= yypos60; yy->__thunkpos= yythunkpos60;  if (!yymatchChar(yy, '<')) goto l57;
  }
  l60:;	  if (!yy__(yy)) goto l57;  if (!yy_Comparison(yy)) goto l57;  goto l56;
  l57:;	  yy->__pos= yypos57; yy->__thunkpos= yythunkpos57;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Comparison", yy->__buf+yy->__pos));
  return 1;
  l55:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comparison", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Identifier(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Identifier"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l63;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l63;
  l64:;	
  {  int yypos65= yy->__pos, yythunkpos65= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l65;  goto l64;
  l65:;	  yy->__pos= yypos65; yy->__thunkpos= yythunkpos65;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l63;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_Identifier, yy->__begin, yy->__end);  if (!yy__(yy)) goto l63;
  yyprintf((stderr, "  ok   %s @ %s\n", "Identifier", yy->__buf+yy->__pos));
  return 1;
  l63:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Identifier", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_List(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "List"));  if (!yy_Comparison(yy)) goto l66;
  l67:;	
  {  int yypos68= yy->__pos, yythunkpos68= yy->__thunkpos;  if (!yymatchChar(yy, ',')) goto l68;  if (!yy__(yy)) goto l68;  if (!yy_List(yy)) goto l68;  goto l67;
  l68:;	  yy->__pos= yypos68; yy->__thunkpos= yythunkpos68;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "List", yy->__buf+yy->__pos));
  return 1;
  l66:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "List", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Function(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Function"));  if (!yy_Identifier(yy)) goto l69;  if (!yymatchString(yy, "->")) goto l69;  if (!yy__(yy)) goto l69;  if (!yy_Expression(yy)) goto l69;
  yyprintf((stderr, "  ok   %s @ %s\n", "Function", yy->__buf+yy->__pos));
  return 1;
  l69:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Function", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Definition(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Definition"));  if (!yy_Identifier(yy)) goto l70;  if (!yymatchString(yy, "<-")) goto l70;  if (!yy__(yy)) goto l70;  if (!yy_Expression(yy)) goto l70;
  yyprintf((stderr, "  ok   %s @ %s\n", "Definition", yy->__buf+yy->__pos));
  return 1;
  l70:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Definition", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expression(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Expression"));
  {  int yypos72= yy->__pos, yythunkpos72= yy->__thunkpos;  if (!yy_Definition(yy)) goto l73;  goto l72;
  l73:;	  yy->__pos= yypos72; yy->__thunkpos= yythunkpos72;  if (!yy_Function(yy)) goto l74;  goto l72;
  l74:;	  yy->__pos= yypos72; yy->__thunkpos= yythunkpos72;  if (!yy_List(yy)) goto l71;
  }
  l72:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expression", yy->__buf+yy->__pos));
  return 1;
  l71:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expression", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EndOfFile(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EndOfFile"));
  {  int yypos76= yy->__pos, yythunkpos76= yy->__thunkpos;  if (!yymatchDot(yy)) goto l76;  goto l75;
  l76:;	  yy->__pos= yypos76; yy->__thunkpos= yythunkpos76;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfFile", yy->__buf+yy->__pos));
  return 1;
  l75:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfFile", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Procedure(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Procedure"));  if (!yy_Expression(yy)) goto l77;
  l78:;	
  {  int yypos79= yy->__pos, yythunkpos79= yy->__thunkpos;  if (!yymatchChar(yy, ';')) goto l79;  if (!yy__(yy)) goto l79;  if (!yy_Procedure(yy)) goto l79;  goto l78;
  l79:;	  yy->__pos= yypos79; yy->__thunkpos= yythunkpos79;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Procedure", yy->__buf+yy->__pos));
  return 1;
  l77:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Procedure", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy__(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "_"));
  l81:;	
  {  int yypos82= yy->__pos, yythunkpos82= yy->__thunkpos;
  {  int yypos83= yy->__pos, yythunkpos83= yy->__thunkpos;  if (!yy_Space(yy)) goto l84;  goto l83;
  l84:;	  yy->__pos= yypos83; yy->__thunkpos= yythunkpos83;  if (!yy_Comment(yy)) goto l82;
  }
  l83:;	  goto l81;
  l82:;	  yy->__pos= yypos82; yy->__thunkpos= yythunkpos82;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "_", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_Input(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Input"));  if (!yy__(yy)) goto l85;  if (!yy_Procedure(yy)) goto l85;  if (!yy_EndOfFile(yy)) goto l85;
  yyprintf((stderr, "  ok   %s @ %s\n", "Input", yy->__buf+yy->__pos));
  return 1;
  l85:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Input", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_Input);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif
